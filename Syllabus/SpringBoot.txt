## Consume Third Party API in Spring Boot Application

    To consume a third-party API in a Spring Boot application, you typically follow these steps:
        1.Add Dependency:
            Include any necessary dependencies in your pom.xml or build.gradle file to enable HTTP client functionality.
            For example, you can use Apache HttpClient, OkHttp, or Spring's own RestTemplate or WebClient.
        2.Create Configuration:
            Configure the HTTP client or RestTemplate bean in your Spring Boot application.
            This typically involves creating a @Configuration class where you define and configure the RestTemplate or WebClient bean.
        3.Invoke the API:
            Use the configured HTTP client or RestTemplate to make requests to the third-party API.
            This could be done in a service class or a controller depending on your application's design.

Here's a basic example using Spring's RestTemplate:

1.Add Dependency:

<!-- If using Maven -->
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-web</artifactId>
</dependency>

2.Create Configuration:

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.client.RestTemplate;

@Configuration
public class AppConfig {

    @Bean
    public RestTemplate restTemplate() {
        return new RestTemplate();
    }
}

3.Invoke the API:

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

@Service
public class MyService {

    @Autowired
    private RestTemplate restTemplate;

    public String callThirdPartyAPI() {
        String apiUrl = "https://api.example.com/data";
        return restTemplate.getForObject(apiUrl, String.class);
    }
}

In this example, RestTemplate is injected into the MyService class and used to make a GET request to a hypothetical third-party API.

Alternatively, you can use Spring's WebClient, which is a more modern and reactive way to consume RESTful services in Spring.

---

## What is @SpringBootApplication ?

    `@SpringBootApplication` is an annotation in the Spring Framework for Java that combines three other annotations into one: @Configuration, @EnableAutoConfiguration, and @ComponentScan.
    It's commonly used to mark the main class of a Spring Boot application.

    Here's a brief overview of what each of these annotations does:

    1.`@Configuration`: Indicates that the class is a source of bean definitions for the application context. It allows defining beans using Java-based configuration instead of XML.

    2.`@EnableAutoConfiguration`: Tells Spring Boot to automatically configure the Spring application based on its dependencies. This annotation triggers Spring Boot's auto-configuration mechanism, which attempts to guess and configure beans based on the classpath and various property settings.

    3.`@ComponentScan`: Instructs Spring to scan the specified packages for components (such as @Component, @Service, @Repository, etc.) so that they can be automatically registered and used by the Spring application context.

    By combining these three annotations into @SpringBootApplication, developers can create a standalone Spring Boot application with minimal configuration. It's often used to bootstrap a Spring Boot application and launch it from the main method.

---

## 
















---
How is authentication and authorization done in your Spring boot?